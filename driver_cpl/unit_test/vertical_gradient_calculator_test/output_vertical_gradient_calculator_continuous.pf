module output_vertical_gradient_calculator_continuous

  ! This module runs vertical_gradient_calculator_continuous in some integration-style
  ! tests, printing out the results for each test case for later plotting.
  !
  ! We don't actually do assertions on the results - they are just made available for
  ! manual inspection later. However, we (ab)use pfunit to do this anyway.

  use pfunit_mod
  use vertical_gradient_calculator_continuous
  use vertical_gradient_calculator_2nd_order
  use vertical_gradient_calculator_continuousNoLimit
  use shr_kind_mod , only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: OutputVGCCont
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: run_test
     procedure :: write_output
  end type OutputVGCCont

  real(r8), parameter :: tol = 1.e-13_r8

  ! Standard elevation class bounds when running with 10 elevation classes
  real(r8), parameter :: bounds_10ec(11) = &
       [0._r8,   200._r8,   400._r8,   700._r8,  1000._r8,  1300._r8,  &
       1600._r8,  2000._r8,  2500._r8,  3000._r8, 10000._r8]

contains

  ! ========================================================================
  ! Test helpers
  ! ========================================================================

  subroutine setUp(this)
    class(OutputVGCCont), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(OutputVGCCont), intent(inout) :: this
  end subroutine tearDown

  subroutine run_test(this, name, elevclass_bounds, topo, data)
    ! Set up and run a test with the given inputs, for a single point
    !
    ! Also outputs results to files
    !
    ! Does separate outputs for:
    ! - initialguess
    ! - unlimited
    ! - limited
    class(OutputVGCCont), intent(inout) :: this
    character(len=*), intent(in) :: name
    real(r8), intent(in) :: elevclass_bounds(:)
    real(r8), intent(in) :: topo(:)
    real(r8), intent(in) :: data(:)

    type(vertical_gradient_calculator_2nd_order_type) :: calculator_initial_guess
    type(vgc_continuousNoLimit_type) :: calculator_unlimited
    type(vertical_gradient_calculator_continuous_type) :: calculator_limited
    integer :: nelev
    real(r8) :: gradients(size(topo))
    ! ------------------------------------------------------------------------

    nelev = size(topo)
    @assertEqual(nelev, size(data))
    @assertEqual(nelev+1, size(elevclass_bounds))

    calculator_initial_guess = vertical_gradient_calculator_2nd_order_type( &
         field = reshape(data, [1, nelev]), &
         topo = reshape(topo, [1, nelev]), &
         elevclass_bounds = elevclass_bounds)
    call calculator_initial_guess%calc_gradients()
    call calculator_initial_guess%get_gradients_one_point(point = 1, gradients = gradients)
    call this%write_output( &
         name = trim(name) // '_initialguess', &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)

    calculator_unlimited = vgc_continuousNoLimit_type( &
         field = reshape(data, [1, nelev]), &
         topo = reshape(topo, [1, nelev]), &
         elevclass_bounds = elevclass_bounds, &
         calculator_initial_guess = calculator_initial_guess)
    call calculator_unlimited%calc_gradients()
    call calculator_unlimited%get_gradients_one_point(point = 1, gradients = gradients)
    call this%write_output( &
         name = trim(name) // '_unlimited', &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)

    calculator_limited = vertical_gradient_calculator_continuous_type( &
         field = reshape(data, [1, nelev]), &
         topo = reshape(topo, [1, nelev]), &
         elevclass_bounds = elevclass_bounds, &
         calculator_initial_guess = calculator_initial_guess)
    call calculator_limited%calc_gradients()
    call calculator_limited%get_gradients_one_point(point = 1, gradients = gradients)
    call this%write_output( &
         name = trim(name) // '_limited', &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)

  end subroutine run_test

  subroutine write_output(this, name, elevclass_bounds, topo, data, gradients)
    class(OutputVGCCont), intent(inout) :: this
    character(len=*), intent(in) :: name
    real(r8), intent(in) :: elevclass_bounds(:)
    real(r8), intent(in) :: topo(:)
    real(r8), intent(in) :: data(:)
    real(r8), intent(in) :: gradients(:)

    integer :: n_elev_classes
    character(len=:), allocatable :: filename
    character(len=32) :: bounds_format
    character(len=32) :: data_format

    character(len=*), parameter :: filename_prefix = 'gradients_continuous_'
    character(len=*), parameter :: filename_suffix = '.txt'
    integer, parameter :: out_unit = 11

    ! ------------------------------------------------------------------------

    n_elev_classes = size(gradients)
    @assertEqual(n_elev_classes + 1, size(elevclass_bounds))
    @assertEqual(n_elev_classes, size(topo))
    @assertEqual(n_elev_classes, size(data))

    filename = filename_prefix // trim(name) // filename_suffix
    open(out_unit, file=filename, action='write')

    write(bounds_format, '(a, i0, a, a)') '(', n_elev_classes + 1, 'f20.10', ')'
    write(data_format, '(a, i0, a, a)') '(', n_elev_classes, 'f20.10', ')'

    write(out_unit, '(i0)') n_elev_classes
    write(out_unit, bounds_format) elevclass_bounds
    write(out_unit, data_format) topo
    write(out_unit, data_format) data
    write(out_unit, data_format) gradients

    close(out_unit)
  end subroutine write_output

  ! ========================================================================
  ! Actual tests
  ! ========================================================================

  @Test
  subroutine basic(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'basic', &
         elevclass_bounds = [0._r8, 20._r8, 40._r8, 60._r8, 80._r8, 100._r8], &
         topo = [10._r8, 30._r8, 50._r8, 70._r8, 90._r8], &
         data = [2._r8, 5.5_r8, 8._r8, 9.5_r8, 10._r8])
  end subroutine basic

end module output_vertical_gradient_calculator_continuous
