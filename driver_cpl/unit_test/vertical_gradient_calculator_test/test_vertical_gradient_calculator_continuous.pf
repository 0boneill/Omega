module test_vertical_gradient_calculator_continuous

  ! Tests of vertical_gradient_calculator_continuous

  use pfunit_mod
  use vertical_gradient_calculator_continuous
  use shr_kind_mod , only : r8 => shr_kind_r8
  use vertical_gradient_test_utils

  implicit none
  save

  @TestCase
  type, extends(TestCase) :: TestVertGradCalcCont
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: create_calculator
     procedure :: create_calculator_one_point
     procedure :: write_output
  end type TestVertGradCalcCont

  real(r8), parameter :: tol = 1.e-13_r8
  integer, parameter :: out_unit = 11
  integer :: test_num = 0

contains

  subroutine setUp(this)
    class(TestVertGradCalcCont), intent(inout) :: this
    character(len=32) :: filename
    test_num = test_num + 1
    write(filename, '(a, i0, a)') 'gradients_continuous_', test_num, '.txt'
    open(out_unit, file=filename, action='write')
  end subroutine setUp

  subroutine tearDown(this)
    class(TestVertGradCalcCont), intent(inout) :: this
    close(out_unit)
  end subroutine tearDown

  function create_calculator(this, topo, data, elevclass_bounds) &
       result(calculator)
    type(vertical_gradient_calculator_continuous_type) :: calculator
    class(TestVertGradCalcCont), intent(inout) :: this
    real(r8), intent(in) :: topo(:,:)  ! topo(i,j) is point i, elevation class j
    real(r8), intent(in) :: data(:,:)  ! data(i,j) is point i, elevation class j

    ! bounds of each elevation class; this array should have one more element than the
    ! number of elevation classes, since it contains lower and upper bounds for each
    ! elevation class
    real(r8), intent(in) :: elevclass_bounds(:)

    integer :: n_elev_classes

    n_elev_classes = size(data,2)
    @assertEqual(size(data), size(topo))
    @assertEqual(n_elev_classes + 1, size(elevclass_bounds))

    calculator = vertical_gradient_calculator_continuous_type( &
         field = data, &
         topo = topo, &
         elevclass_bounds = elevclass_bounds)
    call calculator%calc_gradients()

  end function create_calculator

  function create_calculator_one_point(this, topo, data, elevclass_bounds) &
       result(calculator)
    ! Convenience wrapper to create_calculator, when just dealing with one point
    type(vertical_gradient_calculator_continuous_type) :: calculator
    class(TestVertGradCalcCont), intent(inout) :: this
    real(r8), intent(in) :: topo(:)
    real(r8), intent(in) :: data(:)

    ! bounds of each elevation class; this array should have one more element than the
    ! number of elevation classes, since it contains lower and upper bounds for each
    ! elevation class
    real(r8), intent(in) :: elevclass_bounds(:)


    calculator = this%create_calculator( &
         topo = reshape(topo, [1, size(topo)]), &
         data = reshape(data, [1, size(data)]), &
         elevclass_bounds = elevclass_bounds)
  end function create_calculator_one_point

  subroutine write_output(this, elevclass_bounds, topo, data, gradients)
    class(TestVertGradCalcCont), intent(inout) :: this
    real(r8), intent(in) :: elevclass_bounds(:)
    real(r8), intent(in) :: topo(:)
    real(r8), intent(in) :: data(:)
    real(r8), intent(in) :: gradients(:)

    integer :: n_elev_classes
    character(len=32) :: bounds_format
    character(len=32) :: data_format

    n_elev_classes = size(gradients)
    @assertEqual(n_elev_classes + 1, size(elevclass_bounds))
    @assertEqual(n_elev_classes, size(topo))
    @assertEqual(n_elev_classes, size(data))

    write(bounds_format, '(a, i0, a, a)') '(', n_elev_classes + 1, 'f20.10', ')'
    write(data_format, '(a, i0, a, a)') '(', n_elev_classes, 'f20.10', ')'

    write(out_unit, '(i0)') n_elev_classes
    write(out_unit, bounds_format) elevclass_bounds
    write(out_unit, data_format) topo
    write(out_unit, data_format) data
    write(out_unit, data_format) gradients
  end subroutine write_output

  @Test
  subroutine basic(this)
    class(TestVertGradCalcCont), intent(inout) :: this
    type(vertical_gradient_calculator_continuous_type) :: calculator
    real(r8), parameter :: elevclass_bounds(6) = &
         [0._r8, 20._r8, 40._r8, 60._r8, 80._r8, 100._r8]
    real(r8), parameter :: topo(5) = [10._r8, 30._r8, 50._r8, 70._r8, 90._r8]
    real(r8), parameter :: data(5) = [2._r8, 5.5_r8, 8._r8, 9.5_r8, 10._r8]
    real(r8) :: gradients(5)
    real(r8) :: expected_gradients(5)

    calculator = this%create_calculator_one_point(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    gradients = all_gradients_one_point(calculator, &
         n_elev_classes = 5, &
         npts = 1, &
         pt = 1)

    expected_gradients(:) = [0.2_r8, 0.15_r8, 0.10_r8, 0.05_r8, 0.0_r8]
    @assertEqual(expected_gradients, gradients, tolerance=tol)

    ! FIXME(wjs, 2016-04-27) Move this to somewhere else
    call this%write_output( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)

  end subroutine basic

  ! FIXME(wjs, 2016-04-27) delete this
  @Test
  subroutine real_temp(this)
    class(TestVertGradCalcCont), intent(inout) :: this
    type(vertical_gradient_calculator_continuous_type) :: calculator
    ! Using a max of 4000 in the top elevclass should give the same results as 10000, and
    ! will make for a prettier figure
    real(r8), parameter :: elevclass_bounds(11) = &
         [0._r8,   200._r8,   400._r8,   700._r8,  1000._r8,  1300._r8,  &
         1600._r8,  2000._r8,  2500._r8,  3000._r8, 4000._r8]
    real(r8) :: topo(10)
    real(r8) :: data(10)
    real(r8) :: gradients(10)

       topo(1) = 150.d0
       topo(2) = 370.d0
       topo(3) = 618.d0
       topo(4) = 777.d0
       topo(5) = 1205.d0
       topo(6) = 1372.d0
       topo(7) = 1800.d0
       topo(8) = 2250.d0
       topo(9) = 2750.d0
       topo(10)= 3500.d0

       data(1) = -3.89d0
       data(2) = -2.42d0
       data(3) = -0.71d0
       data(4) =  0.00d0
       data(5) =  2.19d0
       data(6) =  2.19d0
       data(7) =  2.19d0
       data(8) =  2.19d0
       data(9) =  2.20d0
       data(10)=  2.74d0

    

    calculator = this%create_calculator_one_point(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    gradients = all_gradients_one_point(calculator, &
         n_elev_classes = 10, &
         npts = 1, &
         pt = 1)

    call this%write_output( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)
  end subroutine real_temp

  ! FIXME(wjs, 2016-04-27) move this elsewhere
  @Test
  subroutine real_data1(this)
    class(TestVertGradCalcCont), intent(inout) :: this
    type(vertical_gradient_calculator_continuous_type) :: calculator
    ! Using a max of 4000 in the top elevclass should give the same results as 10000, and
    ! will make for a prettier figure
    real(r8), parameter :: elevclass_bounds(11) = &
         [0._r8,   200._r8,   400._r8,   700._r8,  1000._r8,  1300._r8,  &
         1600._r8,  2000._r8,  2500._r8,  3000._r8, 4000._r8]
    real(r8), parameter :: topo(10) = &
         [150.45797729492188_r8, 369.68896484375_r8, 618.4522705078125_r8, 776.9857177734375_r8,  &
         1205.492919921875_r8, 1372.2435302734375_r8, 1800.0_r8, 2250.0_r8, 2750.0_r8, 3500.0_r8]
    real(r8), parameter :: data(10) = &
         [-3.8940095691941679e-05_r8, -2.4159431632142514e-05_r8, -7.1326958277495578e-06_r8, &
         3.2833636254281373e-08_r8, 2.1934458345640451e-05_r8, 2.1910125724389218e-05_r8, &
         2.191431303799618e-05_r8, 2.1943444153293967e-05_r8, 2.1968355213175528e-05_r8, &
         2.7414380383561365e-05_r8]
    real(r8) :: gradients(10)

    calculator = this%create_calculator_one_point(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    gradients = all_gradients_one_point(calculator, &
         n_elev_classes = 10, &
         npts = 1, &
         pt = 1)

    call this%write_output( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)
  end subroutine real_data1

  ! FIXME(wjs, 2016-04-27) move this elsewhere
  @Test
  subroutine real_data1_combinedA(this)
    ! See what happens when we combine the data from real_data1 that all have
    ! approximately equal SMB
    class(TestVertGradCalcCont), intent(inout) :: this
    type(vertical_gradient_calculator_continuous_type) :: calculator
    ! Using a max of 4000 in the top elevclass should give the same results as 10000, and
    ! will make for a prettier figure
    real(r8), parameter :: elevclass_bounds(7) = &
         [0._r8,   200._r8,   400._r8,   700._r8,  1000._r8,  3000._r8,  4000._r8]
    real(r8), parameter :: topo(6) = &
         [150.45797729492188_r8, 369.68896484375_r8, 618.4522705078125_r8, 776.9857177734375_r8,  &
         2146.2894083658853_r8, &  ! mean of elevation classes 5-9
         3500.0_r8]
    real(r8), parameter :: data(6) = &
         [-3.8940095691941679e-05_r8, -2.4159431632142514e-05_r8, -7.1326958277495578e-06_r8, &
         3.2833636254281373e-08_r8, &
         2.1934139294899068e-05_r8, &  ! mean of elevation classes 5-9
         2.7414380383561365e-05_r8]
    real(r8) :: gradients(6)

    calculator = this%create_calculator_one_point(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    gradients = all_gradients_one_point(calculator, &
         n_elev_classes = 6, &
         npts = 1, &
         pt = 1)

    call this%write_output( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)
  end subroutine real_data1_combinedA

  ! FIXME(wjs, 2016-04-27) move this elsewhere
  @Test
  subroutine real_data2(this)
    class(TestVertGradCalcCont), intent(inout) :: this
    type(vertical_gradient_calculator_continuous_type) :: calculator
    ! Using a max of 4000 in the top elevclass should give the same results as 10000, and
    ! will make for a prettier figure
    real(r8), parameter :: elevclass_bounds(11) = &
         [0._r8,   200._r8,   400._r8,   700._r8,  1000._r8,  1300._r8,  &
         1600._r8,  2000._r8,  2500._r8,  3000._r8, 4000._r8]
    real(r8), parameter :: topo(10) = &
         [100.0_r8, 300.0_r8, 553.73822021484375_r8, 843.978759765625_r8, 1152.2908935546875_r8, &
         1450.9669189453125_r8, 1628.5628662109375_r8, 2250.0_r8, 2750.0_r8, 3500.0_r8]
    real(r8), parameter :: data(10) = &
         [-3.2589337934041396e-05_r8, -6.7787163970933761e-06_r8, 0.0_r8, &
         8.7906073531485163e-06_r8, 8.6524905782425776e-06_r8, 8.2202923294971697e-06_r8, &
         7.9119627116597258e-06_r8, 7.5692469181376509e-06_r8, 7.3112623795168474e-06_r8, &
         7.0084388426039368e-06_r8]
    real(r8) :: gradients(10)

    calculator = this%create_calculator_one_point(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    gradients = all_gradients_one_point(calculator, &
         n_elev_classes = 10, &
         npts = 1, &
         pt = 1)

    call this%write_output( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)
  end subroutine real_data2

  @Test
  subroutine topo_outOfBoundsHigh(this)
    class(TestVertGradCalcCont), intent(inout) :: this
    type(vertical_gradient_calculator_continuous_type) :: calculator
    real(r8), parameter :: elevclass_bounds(4) = &
         [0._r8, 20._r8, 40._r8, 60._r8]
    real(r8), parameter :: topo(3) = [10._r8, 40._r8 + 1.e-5_r8, 50._r8]
    real(r8), parameter :: data(3) = [2._r8, 5.5_r8, 8._r8]
    real(r8) :: gradients(3)

    calculator = this%create_calculator_one_point(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    gradients = all_gradients_one_point(calculator, &
         n_elev_classes = 3, &
         npts = 1, &
         pt = 1)

    @assertEqual([0._r8, 0._r8, 0._r8], gradients)
  end subroutine topo_outOfBoundsHigh

  @Test
  subroutine topo_outOfBoundsLow(this)
    class(TestVertGradCalcCont), intent(inout) :: this
    type(vertical_gradient_calculator_continuous_type) :: calculator
    real(r8), parameter :: elevclass_bounds(4) = &
         [0._r8, 20._r8, 40._r8, 60._r8]
    real(r8), parameter :: topo(3) = [10._r8, 20._r8 - 1.e-5_r8, 50._r8]
    real(r8), parameter :: data(3) = [2._r8, 5.5_r8, 8._r8]
    real(r8) :: gradients(3)

    calculator = this%create_calculator_one_point(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    gradients = all_gradients_one_point(calculator, &
         n_elev_classes = 3, &
         npts = 1, &
         pt = 1)

    @assertEqual([0._r8, 0._r8, 0._r8], gradients)
  end subroutine topo_outOfBoundsLow

end module test_vertical_gradient_calculator_continuous
