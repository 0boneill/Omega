#!/usr/bin/env python

"""
This utility allows the CIME user to view a field in a env_*xml file via a commandline interface.

If this tool is missing any feature that you need, please go to github and create an issue (https://github.com/ESMCI/cime/issues). Detailed information is available at https://github.com/ESMCI/cime.


    AUTHOR AND CREDITS
        Authors: Jim Edwards , ....

        Based on legacy code with many contributers. (see ...)

    COPYRIGHT AND LICENSE

        This library is free software; you can redistribute it and/or modify
        it under the same terms as Python itself.
"""

from standard_script_setup import *

from CIME.case import Case
from CIME.utils import expect
import textwrap
import sys

logger = logging.getLogger("xmlquery")

###############################################################################
def parse_command_line(args):
###############################################################################
    parser = argparse.ArgumentParser(   description="Querry the xml files for attributes and return their values." ,
                                        formatter_class=argparse.RawDescriptionHelpFormatter, epilog=textwrap.dedent(__doc__) )
    CIME.utils.setup_standard_logging_options(parser)

    # Set command line options
    parser.add_argument("variables", nargs="*"  ,
                        help="variable name in env_*.xml file ( <entry_id id='variable_name'>value</entry_id> )")

    parser.add_argument("-file" , "--file",
                        help="env*.xml file")

    parser.add_argument("-subgroup","--subgroup",
                        help="apply to this subgroup only")

    parser.add_argument("-caseroot" , "--caseroot", default=os.getcwd(),
                        help="Case directory to build")

    parser.add_argument("-listall", "--listall" , default=False , action="store_true" ,
                        help="List all attributes and their values")

    parser.add_argument("-no-resolve", "--no-resolve", action="store_true",
                        help="Do not resolve variable values")

    group = parser.add_mutually_exclusive_group()


    group.add_argument("-fileonly", "--fileonly", default=False, action="store_true",
                        help="Only print the filename that the field is defined in.")

    group.add_argument("-value", "--value", default=False, action="store_true",
                        help="Only print one value without newline character. If more than one has been found print first value in list.")

    group.add_argument("--raw", default=False, action="store_true",
                        help="Print the complete raw record associated with this variable")
    group.add_argument("--description", default=False, action="store_true",
                        help="Print the description associated with this variable")

    args = parser.parse_args(args[1:])

    CIME.utils.handle_standard_logging_options(args)

    if (len(sys.argv) == 1) :
        parser.print_help()
        exit()

    if len(args.variables) == 1:
        variables = args.variables[0].split(',')
    else:
        variables = args.variables

    return variables, args.file, args.caseroot, args.listall, args.fileonly, \
        args.value, args.no_resolve, args.raw, args.description

def xmlquery(case, variables=[], listall=False, fileonly=False, value=False, resolved=True, raw=False, description=False):
    """
    Return list of attributes and their values , print formatted

    """
    results = {}
    if listall:
        variables = case.get_record_field(None, "varid").split(",")

    for var in variables:
        if raw:
            results[var] = {'raw': case.get_record_field(var, "raw")}
        elif description:
            results[var] = {'desc': case.get_record_field(var, "desc")}
        else:
            results[var] = {'value': case.get_value(var, resolved=resolved)}


    return results

def _main_func():
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    # Initialize command line parser and get command line options
    variables, infile, caseroot, listall, fileonly,  \
        value, no_resolve, raw, description = parse_command_line(sys.argv)

    # Initialize case ; read in all xml files from caseroot
    with Case(caseroot) as case:
        results = xmlquery(case, variables, listall, fileonly, value, resolved=not no_resolve, raw=raw, description=description)

    for var in iter(variables):
        if raw:
            print results[var]['raw']
        elif value:
            sys.stdout.write("%s"%results[var]['value'])
        elif description:
            print "%s: %s"%(var, results[var]['desc'])
        else:
            print "%s: %s"%(var, results[var]['value'])


if (__name__ == "__main__"):
    _main_func()
