#!/usr/bin/env python2

"""
case.submit - Submit a cesm workflow to the queueing system or run it if there is no queueing system.   A cesm workflow may include multiple jobs.
"""

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect
from CIME.env_module        import EnvModule
from CIME.preview_namelists        import preview_namelists
from CIME.check_lockedfiles        import check_lockedfiles
from CIME.XML.batch                 import Batch
from CIME.batch_utils import BatchUtils

logger = logging.getLogger(__name__)

def submit(caseroot, job="case.run", resubmit=None, no_batch=False):
    case = Case(caseroot)
    if resubmit is None:
        check_case(case, caseroot)
        check_DA_settings(case)
    #Load Modules
    env_module = EnvModule(case.get_value("MACH"), case.get_value("COMPILER"),
                           case.get_value("CIMEROOT"),caseroot, case.get_value("MPILIB"),
                           case.get_value("DEBUG"))
    env_module.load_env_for_case()
    batchobj = BatchUtils(job, case)
    case.set_value("RUN_WITH_SUBMIT",True)
    case.flush()
    batchobj.submit_jobs(no_batch=no_batch)

def check_case(case,caseroot):
    check_lockedfiles(caseroot)
    preview_namelists(dryrun=False, casedir=caseroot)
    expect(case.get_value("BUILD_COMPLETE"), "Build complete is "
           "not True please rebuild the model by calling case.build")
    logger.info("Check case OK")

def check_DA_settings(case):
    if case.get_value("DATA_ASSIMILATION"):
        script = case.get_value("DATA_ASSIMILATION_SCRIPT")
        cycles = case.get_value("DATA_ASSIMILATION_CYCLES")
        logger.info("Data Assimilation enabled using script %s with %d cycles"%(script,cycles))


###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n%s [<casedir>] [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Setup case \033[0m
    > %s
""" % ((os.path.basename(args[0]), ) * 4),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("caseroot", nargs="?", default=os.getcwd(),
                        help="Case directory to setup")

    parser.add_argument("--job", "-j", default="case.run",
                        help="Name of the job to be submitted, default is case.run"
                        " can be any of the jobs listed in env_batch.xml")

    parser.add_argument("--no-batch", action="store_true",
                        help="Do not submit jobs to batch system, run locally.")

    args = parser.parse_args(args[1:])

    CIME.utils.handle_standard_logging_options(args)

    return args.caseroot, args.job, args.no_batch

###############################################################################
def _main_func(description):
###############################################################################
    if "--test" in sys.argv:
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    caseroot, job, no_batch = parse_command_line(sys.argv, description)

    submit(caseroot, job=job, no_batch=no_batch)

if __name__ == "__main__":
    _main_func(__doc__)
