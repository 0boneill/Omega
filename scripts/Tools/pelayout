#!/usr/bin/env python

"""
This utility allows the CIME user to view and modify a case's PE layout.

Interpreted format sequences are:"
%%  a literal %
%C  the component name
%T  the task count for the component
%H  the thread count for the component
%R  the PE root for the component

Standard format extensions, such as a field length and padding are supported.
Example:
  For NTASKS_ATM=480, NTHREADS_ATM=2 and ROOTPE_ATM, \"%C: %06T/%+H\" will show
ATM:    480/+2
Note that since %R was omitted, the root PE was not shown.
=======================
If this tool is missing any feature that you need, please go to github and
create an issue (https://github.com/ESMCI/cime/issues). Detailed
information is available at https://github.com/ESMCI/cime.

    COPYRIGHT AND LICENSE

        This library is free software; you can redistribute it and/or modify
        it under the same terms as Python itself.
"""

from standard_script_setup import *

from CIME.case import Case
from CIME.utils import expect, convert_to_string
import textwrap
import sys
import re

logger = logging.getLogger("xmlquery")

###############################################################################
def parse_command_line(args):
###############################################################################
    parser = argparse.ArgumentParser(description="Display and/or change the case's PE layout." ,
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=textwrap.dedent(__doc__) )
    CIME.utils.setup_standard_logging_options(parser)

    # Set command line options
    parser.add_argument("-format" , "--format",
                        help="Format the PE layout items for each component (see below)")

    parser.add_argument("-caseroot" , "--caseroot", default=os.getcwd(),
                        help="Case directory to build")

    args = parser.parse_args(args[1:])

    CIME.utils.handle_standard_logging_options(args)

    return args.format, args.caseroot
# End def parse_command_line


###############################################################################
def get_value_as_string(case, var, attribute=None, resolved=False, subgroup=None):
###############################################################################
    thistype = case.get_type_info(var)
    value = case.get_value(var, attribute=attribute, resolved=resolved, subgroup=subgroup)
    if value is not None and thistype:
        value = convert_to_string(value, thistype, var)
    return value


reComp = re.compile(r"%%([0-9]*)C")
reTask = re.compile(r"%%([-+0-9]*)T")
reThrd = re.compile(r"%%([-+0-9]*)H")
reRoot = re.compile(r"%%([-+0-9]*)R")
###############################################################################
def format_pelayout(comp, ntasks, nthreads, rootpe, format):
###############################################################################
    """
    Format the PE layout information for each component, using a default format,
    or using the format input, if it exists.
    """
    if (format is None):
        layout_str = "%s: %6d/%d; %6d"%(comp, ntasks, nthreads, rootpe)
    else:
        layout_str = re.sub("%", "%%", format)
        if (reComp.search(layout_str) is not None):
            layout_str = re.sub(reComp, r"%\1s", layout_str)%comp
        # End if
        layout_str = re.sub("%", "%%", layout_str)
        if (reTask.search(layout_str) is not None):
            layout_str = re.sub(reTask, r"%\1d", layout_str)%ntasks
        # End if
        layout_str = re.sub("%", "%%", layout_str)
        if (reThrd.search(layout_str) is not None):
            layout_str = re.sub(reThrd, r"%\1d", layout_str)%nthreads
        # End if
        layout_str = re.sub("%", "%%", layout_str)
        if (reRoot.search(layout_str) is not None):
            layout_str = re.sub(reRoot, r"%\1d", layout_str)%rootpe
        # End if
    # End if
    return layout_str
# End def format_pelayout

###############################################################################
def print_pelayout(case, ntasks, nthreads, rootpes, format):
###############################################################################
    """
    Print the PE layout information for each component, using the format,
     if it exists.
    """
    comp_classes = case.get_values("COMP_CLASSES")

    for comp in comp_classes:
        print format_pelayout(comp, ntasks[comp], nthreads[comp], rootpes[comp], format)
    # End for
    
# End def print_pelayout

###############################################################################
def gather_pelayout(case, format=None):
###############################################################################
    """
    Gather the PE layout information for each component
    """
    ntasks = {}
    nthreads = {}
    rootpes = {}
    comp_classes = case.get_values("COMP_CLASSES")

    for comp in comp_classes:
        ntasks[comp]   = case.get_value("NTASKS_"+comp)
        nthreads[comp] = case.get_value("NTHRDS_"+comp)
        rootpes[comp]  = case.get_value("ROOTPE_"+comp)
    # End for
    return ntasks, nthreads, rootpes
# End def pelayout

###############################################################################
def _main_func():
###############################################################################
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    # Initialize command line parser and get command line options
    format, caseroot = parse_command_line(sys.argv)

    # Initialize case ; read in all xml files from caseroot
    with Case(caseroot) as case:
        ntasks, nthreads, rootpes = gather_pelayout(case, format=format)
    # End with

    print_pelayout(case, ntasks, nthreads, rootpes, format)
# End def _main_func

if (__name__ == "__main__"):
    _main_func()
# End if
