#!/usr/bin/env python

"""
A script to verify that the environment is compliant with ACME's software requirements.
"""

# NOTE: in an attempt to minimize the number of fights we're picking, we don't rely on 
# NOTE: the acme_utils module within this script.
import sys, subprocess

# Here's where we keep the various reports and instructions.
log = []

def check_python_version():
    acme_python_major_version = 2
    acme_python_minor_version = 7
    if sys.version_info[0] != acme_python_major_version or sys.version_info[1] < acme_python_minor_version:
        log.append('* ACME currently requires Python version %d.%d+. You appear to be using version %d.%d.'%(acme_python_major_version, acme_python_minor_version, sys.version_info[0], sys.version_info[1]))
        log.append('  Please check to see whether an appropriate version exists on this machine,')
        log.append('  possibly via a loadable module.')

###############################################################################
def check_perl_version():
###############################################################################
    acme_perl_major_version = 5
    acme_perl_minor_version = 16
    p = subprocess.Popen('perl --version', shell=True, stdout=subprocess.PIPE)
    blank_line = p.stdout.readline()
    first_line = p.stdout.readline()
    if 'This is perl' not in first_line:
        log.append('* Perl appears not to be available in your environment.')
        log.append('  Please make sure it exists in your PATH.')
        return
    first_comma = first_line.index(',')
    space_before_first_comma = first_line.rindex(' ', 0, first_comma)
    major_version = int(first_line[space_before_first_comma+1:first_comma])
    second_comma = first_line.index(',', first_comma+1)
    space_before_second_comma = first_line.rindex(' ', 0, second_comma)
    minor_version = int(first_line[space_before_second_comma+1:second_comma])
    if major_version != acme_perl_major_version or minor_version < acme_perl_minor_version:
        log.append('* ACME requires Perl version %d.%d+. You appear to be using %d.%d.'%(acme_perl_major_version, acme_perl_minor_version, major_version, minor_version))
        log.append('  Please check to see whether an appropriate version exists on this machine,')
        log.append('  possibly via a loadable module.')

###############################################################################
def check_git_version():
###############################################################################
    acme_git_major_version = 2
    acme_git_minor_version = 0
    p = subprocess.Popen('git --version', shell=True, stdout=subprocess.PIPE)
    first_line = p.stdout.readline()
    if 'git version ' not in first_line:
        log.append('* Git appears not to be available in your environment.')
        log.append('  Please make sure it exists in your PATH.')
        return
    version = first_line.replace('git version ', '').strip()
    try:
        major_version, minor_version, patch_version = [int(s) for s in version.split('.')]
    except:
        major_version, minor_version = [int(s) for s in version.split('.')]
    if major_version != acme_git_major_version or minor_version < acme_git_minor_version:
        log.append('* ACME requires Git version %d.%d+. You appear to be using version %d.%d.'%(acme_git_major_version, acme_git_minor_version, major_version, minor_version))

###############################################################################

if (__name__ == "__main__"):
    check_python_version()
    check_perl_version()
    check_git_version()

    if len(log) > 0:
        print('acme_check_env found problems with your ACME development environment:\n')
        for line in log:
            print(line)
    else:
        print('acme_check_env found no problems with your ACME development environment.')
