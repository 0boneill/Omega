#!/usr/bin/env perl 
use XML::LibXML;
use IO::File;
use Data::Dumper;
use Getopt::Long;
use POSIX qw(strftime);
use Cwd qw(abs_path);
use File::Basename;
use strict;

#==========================================================================
# Globals
#==========================================================================
my %opts;
my $scriptdir = dirname(abs_path(__FILE__));
my $cimeroot  = abs_path("$scriptdir/../");
my $srcroot  = abs_path("$cimeroot/../");
my $pes_file;
my $compsets_file;
my $component;
my $banner = "==========================================================================";

#==========================================================================
# Simple class to facilitate easier pe-layout parsing..
# ==========================================================================
{
    package CIMEPes;
    sub new 
    {
	my ($class, %params) = @_;
	my $self = {
	    grid       => undef,  	
	    machine    => undef, 	
	    compset    => undef, 	
	    pesize     => undef, 	
	    comment    => undef, 	
	    ntasks_atm => undef, ntasks_lnd => undef, ntasks_ice => undef, ntasks_ocn => undef, 
	    ntasks_rof => undef, ntasks_glc => undef, ntasks_wav => undef, ntasks_cpl => undef,
	    nthrds_atm => undef, nthrds_lnd => undef, nthrds_ice => undef, nthrds_ocn => undef, 	
	    nthrds_rof => undef, nthrds_glc => undef, nthrds_wav => undef, nthrds_cpl => undef, 	
	    rootpe_atm => undef, rootpe_lnd => undef, rootpe_ice => undef, rootpe_ocn => undef,
	    rootpe_rof => undef, rootpe_glc => undef, rootpe_wav => undef, rootpe_cpl => undef,
	    pstrid_atm => undef, pstrid_lnd => undef, pstrid_ice => undef, pstrid_ocn => undef,
	    pstrid_cpl => undef, pstrid_glc => undef, pstrid_rof => undef, pstrid_wav => undef,
	    totalpes   => undef, pes_per_node => undef,  cost_pes     => undef,
	    ccsm_pcost => undef, ccsm_tcost   => undef,  ccsm_estcost => undef,
	};
	bless $self, $class;
	return $self;
    }
}

#==========================================================================
# Show the usage. 
#==========================================================================
sub usage
{

    my $usgstatement;
    $usgstatement = <<EOF;
SYNOPSIS

    manage_pes -query -pes_setby <component_name> [-grid <grid_name> | -machine <machine_name>] 

          <component_name> can be one of  [allactive | cam | cice | cism | clm | drv | pop]

    manage_pes -add -file <newpes_layout> -pes_setby <component_name>
    

DESCRIPTION

    Adds and queries pes with the xml pe-layout files for a pes file set by the argument "-pes_setby"

USAGE, OPTIONS, AND EXAMPLES
   
    There are two modes of operation: -add and -query 
    Usage for each of the modes are described below.  

    -add:
 
    This mode is intended for adding new pe layouts to the peslist. The script will parse your text 
    list, and add the new pe-layout to the appropriate grid, machine and optional argument 
    (i.e. compset, pesize) entry.  If duplicates are found, they will be silently ignored, 
    even if they contain a different comment.  
    Example:
          manage_pes -add -pes_setby <component_name> -machine -grid -attributes -file <xml file with new pelayout>

    -query:

	Query the peslist by grid and machine

    A note on the PE count specifiers:
    T, S, M, L, X are not constant.  first, they are only defined for a few
    compsets/resolution combinations.  second, they depend on compset
    and resolution.   you can imagine a T31_g37 range being 100 cores
    to 1000 cores from T to X.  but ne240_t12 would probably be 500 at T
    and 100,000 at X, for instance.  the 1, 1x1, 16x4, etc specify the tasks
    and threads for each component directly.

EOF

    print $usgstatement;
    exit(1);

}


#==========================================================================
# Get the options, check the options. 
#==========================================================================
sub obtainOptions
{
    GetOptions(
	"h|help"	=> \$opts{'help'},
	"f|file=s"	=> \$opts{'file'},
	"a|add"		=> \$opts{'add'},
	"q|query"	=> \$opts{'query'},
	"pes_setby=s"   => \$opts{'pes_setby'},
	"component=s"   => \$opts{'component'},
	"grid=s"	=> \$opts{'grid'},
	"machine=s"	=> \$opts{'machine'},
	)  or usage();

    if (@ARGV) {
	print "ERROR: unrecognized arguments: @ARGV\n";
	usage();
    }

    if ($opts{'help'}) {
	usage() 	
    }

    # Determine possible components that set up compsets and pes
    my $file_config = "$cimeroot/scripts/cimeconfig/config_files.xml";
    my $xml = XML::LibXML->new( no_blanks => 1)->parse_file($file_config);
    my @nodes = $xml->findnodes(".//entry[\@id=\"PES_SPEC_FILE\"]/values/value");
    my @components;
    foreach my $node (@nodes) {
	my $component = $node->getAttribute('component');
	push (@components, $component);
    }

    if (defined $opts{'query'} ) {
	if ( ! defined $opts{'pes_setby'} ) {
	    foreach my $component (@components) {
		$opts{'pes_setby'}= $component;
		$pes_file = getPesFile();
		$compsets_file = getCompsetsFile();
		queryPes(); 
	    }
	} else {
	    # $opts{'pes_setby'} is defined
	    $pes_file = getPesFile();
	    $compsets_file = getCompsetsFile();
	    queryPes();
	}
	exit(0);
    } else {
	if ( ! defined $opts{'pes_setby'} ) {
	    print "ERROR: must supply a -pes_setby argument \n";
	    print " possible values are: \n";
	    print "   @components \n";
	    exit(1);
	}
	$pes_file = getPesFile();
	$compsets_file = getCompsetsFile();
    }
    if (defined $opts{'add'} && ! defined $opts{'file'})
    {
	print "To add a new pes layout, you must supply a test list via the -file option\n";
	exit(1);
    }
}

#==========================================================================
# Write the new $pes_file.  
#==========================================================================
sub writeXML
{
    my ($pesxml) = shift;
    my $dtformat = strftime "%d%b%Y-%H%M%S",  localtime;
    my $newfilename = "$pes_file" . "-$dtformat"; 

    print "\n now writing the new pes list to $newfilename\n";
    print "Please carefully review and/or diff the new file against the\n";
    print "original, and if you are satisfied with the changes, move \n";
    print "$newfilename to \n";
    print "as in with the unix command: \nmv $newfilename $pes_file\n\n";

    open my $NEWPesXML, ">", "$newfilename" or die $?;
    my $tststring = $pesxml->toString(1); 
    print $NEWPesXML $tststring; 
    close $NEWPesXML;
}

#==========================================================================
# Add a new pe-layout for a target machine and grid.  
# ==========================================================================
sub addPes
{
    # new pes file - assumes for now there is ONLY one entry

    my $xml_new = XML::LibXML->new( no_blanks => 1)->parse_file($opts{'file'});
    my @grid_nodes = $xml_new->findnodes(".//grid");
    if ($#grid_nodes != 0) {
	die " ERROR \@grid_nodes has unsupported size $#grid_nodes \n";
    }
    my $grid = $grid_nodes[0]->getAttribute('name');

    my @mach_nodes = $xml_new->findnodes(".//grid/mach");
    if ($#mach_nodes != 0) {
	die " ERROR \@mach_nodes has unsupported size $#mach_nodes \n";
    }
    my $machine = $mach_nodes[0]->getAttribute('name');

    my @pes_nodes  = $xml_new->findnodes(".//grid/mach/pes");
    if ($#pes_nodes != 0) {
	die " ERROR \@pes_nodes has unsupported size $#pes_nodes \n";
    }
    my $compset = $pes_nodes[0]->getAttribute('compset');
    my $pesize  = $pes_nodes[0]->getAttribute('pesize');

    # Is there already an entry with matching grid, machine, compset and pesize 
    # If so, query if the new settings should replace the current ones
    # If not - just add the new settings

    my $xml = XML::LibXML->new( no_blanks => 1)->parse_file($pes_file);
    my @nodes = $xml->findnodes(".//grid[\@name=\'$grid\']/mach[\@name=\'$machine\']/pes[\@compset=\'$compset\' and \@pesize=\'$pesize\']");
    if ($#nodes > -1) {

	# we found a match - query the user if the new layout should overwrite the old one
	my $string = $nodes[0]->toString(1);
	print " The following pe-layout match already exists \n";
	print "$string \n";
	print " Do you want to override the match with your pe-layout? [yes/no] (default is no) \n";

	my $result = <STDIN>;
	if ($result =~ /yes/) {
	    # remove old grid node
	    my $parent = $nodes[0]->parentNode();
	    my $grandparent = $parent->parentNode();
	    $parent->removeChild($nodes[0]); 			
	    $grandparent->removeChilde($parent);
	    
	    # add new grid node
	    my $root = $xml->findnodes('./config_pes')->get_node(0);
	    $root->addChild($grid_nodes[0]);
	}
	
    } else {

	# add new grid node
	my $root = $xml->findnodes('./config_pes')->get_node(0);
	$root->addChild($grid_nodes[0]);
    }

    writeXML($xml);
}

#==========================================================================
# Query subroutine called from main. Read the xml file, query the object, 
# and print the user's choice of output. 
#==========================================================================
sub queryPes
{
    my $grid = $opts{'grid'};
    my $machine = $opts{'machine'};

    # drill down into the grid nodes.  Move onto the next element
    # if anything doesn't match the grid and machine

    my $xml = XML::LibXML->new( no_blanks => 1)->parse_file($pes_file);
    my $root = $xml->getDocumentElement();
	
    # Does the target grid exist in the config_pes file - if not set it to any
    if (defined $grid) {
	my @pes = $xml->findnodes(".//grid[contains(\@name,\"$grid\")]");
	if ($#pes == -1) {
	    $grid = 'any';
	}
    }

    # Does the target machine exist in the config_pes file - if not set it to any
    if (defined $machine) {
	my @pes = $xml->findnodes(".//grid[contains(\@name,\"$grid\")]/mach[contains(\@name,\"$machine\")]/pes");
	if ($#pes == -1) {
	    $machine = 'any';
	}
    }

    # Determine settings for target machine and target grid
    if ( defined $opts{'grid'} && defined $opts{'machine'}) {
	foreach my $node_grid ($xml->findnodes('.//grid')) {
	    my $node_gridname= $node_grid->getAttribute('name');
	    if ($node_gridname !~ /$opts{'grid'}/) {
		$root->removeChild($node_grid);
		next;
	    }
	    foreach my $node_mach ($node_grid->findnodes("./mach")) {
		my $node_machname= $node_mach->getAttribute('name');
		if ($opts{'machine'} !~ /$node_machname/) {	
		    $node_grid->removeChild($node_mach);
		    next;
		}
		if(! $node_mach->nonBlankChildNodes()) {
		    $node_grid->removeChild($node_mach);
		}
	    }
	    if(! $node_grid->nonBlankChildNodes()) {
		$root->removeChild($node_grid);
	    }
	}
    } elsif ( ! defined $opts{'grid'} && defined $opts{'machine'}) {
	foreach my $node_grid ($xml->findnodes('/config_pes/grid')) {
	    foreach my $node_mach ($node_grid->findnodes("./mach")) {
		my $node_machname= $node_mach->getAttribute('name');
		if ($opts{'machine'} !~ /$node_machname/) {	
		    $node_grid->removeChild($node_mach);
		    next;
		}
		if(! $node_mach->nonBlankChildNodes()) {
		    $node_grid->removeChild($node_mach);
		}
	    }
	    if(! $node_grid->nonBlankChildNodes()) {
		$root->removeChild($node_grid);
	    }
	}
    } elsif ( defined $opts{'grid'} && ! defined $opts{'machine'}) {
	foreach my $node_grid ($xml->findnodes('/config_pes/grid')) {
	    my $node_gridname= $node_grid->getAttribute('name');
	    if ($node_gridname !~ /$opts{'grid'}/) {
		$root->removeChild($node_grid);
		next;
	    }
	}
    }
    formattedOutput($xml);
}

#==========================================================================
# print out the queried test list in a (hopefully) nicely formatted fashion. 
#==========================================================================
sub formattedOutput {

   my $xml = shift;

   my @pes_settings;
   foreach my $grid_node ($xml->findnodes('./config_pes/grid')) 
   {
       my $grid = $grid_node->getAttribute('name');
       foreach my $mach_node ($grid_node->findnodes('./mach')) 
       {
	   my $machine = $mach_node->getAttribute('name');
	   foreach my $pes_node ($mach_node->findnodes('./pes')) 
	   {
	       my $pes_setting = new CIMEPes();
	       $pes_setting->{grid} = $grid;
	       $pes_setting->{machine} = $machine;

               my $pesize  = $pes_node->getAttribute('pesize');
	       if (defined $pesize) {
		   $pes_setting->{pesize} = $pesize;
	       }
               my $compset = $pes_node->getAttribute('compset');
	       if (defined $compset) {
		   $pes_setting->{compset} = $compset;
	       }
	       foreach my $node_comment ($pes_node->findnodes("./comment")) {
		   my $name  = $node_comment->nodeName();
		   my $value = $node_comment->textContent();
		   $pes_setting->{$name} = $value;
	       }
	       foreach my $element ('ntasks','nthrds','rootpe') {
		   foreach my $node_ntasks ($pes_node->findnodes("./$element")) {
		       my @child_nodes = $node_ntasks->childNodes();
		       foreach my $child_node (@child_nodes) {
			   my $name  = $child_node->nodeName();
			   my $value = $child_node->textContent();
			   $pes_setting->{$name} = $value;
		       }
		   }
	       }
	       push(@pes_settings, $pes_setting);
	   }
       }
   }

   my (@output_ntasks, @output_nthrds, @output_rootpe);
   my (@output_header_grid, @output_header_machine, @output_header_compset);
   my (@output_header_pesize, @output_header_comment);

   my %compsets;
   my $xml = XML::LibXML->new()->parse_file("$compsets_file");
   foreach my $compset ($xml->findnodes('//COMPSET')) {
      my $alias = $compset->getAttribute('alias');
      my $sname = $compset->getAttribute('sname');
      $compsets{$alias} = $sname;
   }

   foreach my $pes_setting (@pes_settings) {
       my $grid	       = $pes_setting->{grid};
       my $compset     = $pes_setting->{compset};
       my $fcompset    = "$compset ($compsets{$compset})";
       my $pesize      = $pes_setting->{pesize};
       my $machine     = $pes_setting->{machine};
       my $comment     = $pes_setting->{comment};
       my $ntasks_atm  = $pes_setting->{ntasks_atm};
       my $ntasks_lnd  = $pes_setting->{ntasks_lnd};
       my $ntasks_ice  = $pes_setting->{ntasks_ice};
       my $ntasks_ocn  = $pes_setting->{ntasks_ocn};
       my $ntasks_rof  = $pes_setting->{ntasks_rof};
       my $ntasks_glc  = $pes_setting->{ntasks_glc};
       my $ntasks_wav  = $pes_setting->{ntasks_wav};
       my $ntasks_cpl  = $pes_setting->{ntasks_cpl};
       my $nthrds_atm  = $pes_setting->{nthrds_atm};
       my $nthrds_lnd  = $pes_setting->{nthrds_lnd};
       my $nthrds_ice  = $pes_setting->{nthrds_ice};
       my $nthrds_ocn  = $pes_setting->{nthrds_ocn};
       my $nthrds_rof  = $pes_setting->{nthrds_rof};
       my $nthrds_glc  = $pes_setting->{nthrds_glc};
       my $nthrds_wav  = $pes_setting->{nthrds_wav};
       my $nthrds_cpl  = $pes_setting->{nthrds_cpl};
       my $rootpe_atm  = $pes_setting->{rootpe_atm};
       my $rootpe_lnd  = $pes_setting->{rootpe_lnd};
       my $rootpe_ice  = $pes_setting->{rootpe_ice};
       my $rootpe_ocn  = $pes_setting->{rootpe_ocn};
       my $rootpe_rof  = $pes_setting->{rootpe_rof};
       my $rootpe_glc  = $pes_setting->{rootpe_glc};
       my $rootpe_wav  = $pes_setting->{rootpe_wav};
       my $rootpe_cpl  = $pes_setting->{rootpe_cpl};
       
       my $line_ntasks =  sprintf("         %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s",
				  'ntasks: ', $ntasks_atm, $ntasks_lnd, $ntasks_ice, $ntasks_ocn, $ntasks_rof, $ntasks_glc, $ntasks_wav, $ntasks_cpl);

       my $line_nthrds =  sprintf("         %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s",
				  'nthrds: ', $nthrds_atm, $nthrds_lnd, $nthrds_ice, $nthrds_ocn, $nthrds_rof, $nthrds_glc, $nthrds_wav, $nthrds_cpl);

       my $line_rootpe =  sprintf("         %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s",
				  'rootpe: ', $rootpe_atm, $rootpe_lnd, $rootpe_ice, $rootpe_ocn, $rootpe_rof, $rootpe_glc, $rootpe_wav, $rootpe_cpl);

       my $line_header_grid    = sprintf("      %-8s %-15s ", "grid   :", $grid);
       my $line_header_machine = sprintf("      %-8s %-15s ", "machine:" ,$machine);
       my $line_header_compset = sprintf("      %-8s %-15s ", "compset:", $compset);
       my $line_header_pesize  = sprintf("      %-8s %-10s ", "pesize :", $pesize);
       my $line_header_comment = sprintf("      %-8s %-20s ", "comment:", $comment);

       push(@output_header_grid   , $line_header_grid);
       push(@output_header_machine, $line_header_machine);
       push(@output_header_compset, $line_header_compset);
       push(@output_header_pesize , $line_header_pesize);
       push(@output_header_comment, $line_header_comment);
       push(@output_ntasks, $line_ntasks);
       push(@output_nthrds, $line_nthrds);
       push(@output_rootpe, $line_rootpe);
   }
	
   my $header2        =  sprintf("                    %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s ",
				 "atm", "lnd", "ice", "ocn", "rof", "glc", "wav", "cpl");

   for (my $i = 0; $i <= $#output_ntasks; $i++) {
       map { print "$_" } $output_header_grid[$i];
       map { print "$_" } $output_header_machine[$i];
       map { print "$_" } $output_header_compset[$i];
       map { print "$_\n" } $output_header_pesize[$i];
       map { print "$_\n" } $output_header_comment[$i];
       map { print "$_\n" } $header2;
       map { print "$_\n" } $output_ntasks[$i];
       map { print "$_\n" } $output_nthrds[$i];
       map { print "$_\n" } $output_rootpe[$i];
       map { print "$_\n" } "\n";
   }
}

#==========================================================================
# Determine pes file 
#==========================================================================
sub getPesFile{

    my $file_config = "$cimeroot/scripts/cimeconfig/config_files.xml";
    my $xml = XML::LibXML->new( no_blanks => 1)->parse_file("$file_config");

    my $component = $opts{'pes_setby'};
    my @files = $xml->findnodes(".//entry[\@id=\"PES_SPEC_FILE\"]/values/value[\@component=\"$component\"]");
    if (! @files) {
	die " ERROR: no pes specification file found for $opts{'pes_setby'} \n";
    }
    my $file = $files[0]->textContent();
    $file =~ s/\$CIMEROOT/$cimeroot/;
    $file =~ s/\$SRCROOT/$srcroot/;
    if (-f "$file")  {
	print "\n";
	print "------------------------------------------- \n";
	print " Pes      set by: \n  $file \n";
    } else {
	die "*** Cannot find pes specification file $file ***\n";
    }
    return $file; 
}    

#==========================================================================
# Determine compsets file
#==========================================================================
sub getCompsetsFile{

    my $file_config = "$cimeroot/scripts/cimeconfig/config_files.xml";
    my $xml = XML::LibXML->new( no_blanks => 1)->parse_file("$file_config");

    my $component = $opts{'pes_setby'};
    my @files = $xml->findnodes(".//entry[\@id=\"COMPSETS_SPEC_FILE\"]/values/value[\@component=\"$component\"]");
    if (! @files) {
	die " ERROR: no compsets specification file found for $opts{'pes_setby'} \n";
    }
    my $file = $files[0]->textContent();
    $file =~ s/\$CIMEROOT/$cimeroot/;
    $file =~ s/\$SRCROOT/$srcroot/;
    if (-f "$file")  {
	print " Compsets set by: \n  $file  \n";
	print "------------------------------------------- \n\n";
    } else {
	die "*** Cannot find compsets specification file $file ***\n";
    }
    return $file; 
}    

#==========================================================================
# Main routine
#==========================================================================
sub main
{
    obtainOptions();

    if (defined $opts{'add'})
    {
	print "\n Adding pe layout...\n";
	addPes();
    }
    elsif (defined $opts{'query'})
    {
	queryPes();
    }
}

main(@ARGV) unless caller;
