#!/usr/bin/env python

"""
Script to query xml test lists.
"""
from __future__ import print_function
from Tools.standard_script_setup import *
from CIME.test_utils import get_tests_from_xml

logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(description):
###############################################################################
    parser = argparse.ArgumentParser(
        description=description)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("--xml-machine",
                        help="Use this machine key in the lookup in testlist.xml, default is all")

    parser.add_argument("--xml-compiler",
                        help="Use this compiler key in the lookup in testlist.xml, default is all")

    parser.add_argument("--xml-category",
                        help="Use this category key in the lookup in testlist.xml, default is all")

    parser.add_argument("--xml-testlist",
                        help="Use this testlist to lookup tests, default specified in config_files.xml")

    args = parser.parse_args()

    return args

###############################################################################
def print_test_data(test_data):
    """
    Args:
        test_data (dict): dictionary of test data, containing at least these keys:
            - name: full test name
            - category: test category
    """

    categories = sorted(set([item['category'] for item in test_data]))
    max_category_len = max([len(category) for category in categories])
    for category in categories:
        test_subset = [one_test for one_test in test_data if
                       one_test['category'] == category]
        for one_test in test_subset:
            print("%-*s: %s"%(max_category_len, category, one_test['name']))
            # FIXME(wjs, 2016-10-02) User logger.info instead of print???

###############################################################################
def _main_func(description):
###############################################################################
    args = parse_command_line(description)

    test_data = get_tests_from_xml(args.xml_machine, args.xml_category,
                                   args.xml_compiler, args.xml_testlist)

    print_test_data(test_data)
    
if __name__ == "__main__":
    _main_func(__doc__)
