module test_tridiagonal_inverse

  ! Tests of shr_matrix_mod: tridiagonal_inverse

  use pfunit_mod
  use shr_matrix_mod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use shr_infnan_mod, only : nan => shr_infnan_nan, assignment(=)

  implicit none

  @TestCase
  type, extends(TestCase) :: TestTridiagInverse
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestTridiagInverse

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestTridiagInverse), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestTridiagInverse), intent(inout) :: this
  end subroutine tearDown

  function tridiagonal_matrix(a, b, c)
    ! Construct a tridiagonal matrix from vectors
    real(r8), intent(in)  :: a(:)  ! Center diagonal
    real(r8), intent(in)  :: b(:)  ! Upper diagonal (superdiagonal); b(n) is ignored
    real(r8), intent(in)  :: c(:)  ! Lower diagonal (subdiagonal); c(n) is ignored
    real(r8) :: tridiagonal_matrix(size(a), size(a))

    integer :: i
    integer :: n

    n = size(a)
    @assertEqual(n, size(b))
    @assertEqual(n, size(c))

    tridiagonal_matrix(:,:) = 0._r8
    do i = 1, n
       tridiagonal_matrix(i, i) = a(i)
    end do
    do i = 1, n-1
       tridiagonal_matrix(i, i+1) = b(i)
    end do
    do i = 1, n-1
       tridiagonal_matrix(i+1, i) = c(i)
    end do
  end function tridiagonal_matrix

  function identity_matrix(n)
    ! Returns the identity matrix of size n x n
    real(r8) :: identity_matrix(n,n)
    integer, intent(in) :: n
    integer :: i

    identity_matrix(:,:) = 0._r8
    do i = 1, n
       identity_matrix(i,i) = 1._r8
    end do
  end function identity_matrix

  @Test
  subroutine basic(this)
    ! Do a basic test of tridiagonal_inverse
    class(TestTridiagInverse), intent(inout) :: this
    real(r8), parameter :: a(5) = [10._r8, 9._r8, 8._r8, 7._r8, 6._r8]
    real(r8) :: b(5) = [11._r8, 12._r8, 14._r8, 13._r8, 0._r8]
    real(r8) :: c(5) = [1._r8, 2._r8, 4._r8, 3._r8, 0._r8]
    real(r8) :: arr(5,5)
    real(r8) :: Tinv(5,5)

    b(5) = nan
    c(5) = nan

    call tridiagonal_inverse(a, b, c, Tinv)

    arr = tridiagonal_matrix(a, b, c)
    @assertEqual(identity_matrix(5), matmul(arr, Tinv), tolerance=tol)
  end subroutine basic

end module test_tridiagonal_inverse
