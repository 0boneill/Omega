module cice_time_integration

  use mpas_grid_types
  use mpas_timekeeping

  integer :: nstep = 0

contains

  !--------------------------------------------------------------------------

  subroutine cice_timestep(block, clock, dt)

    use mpas_configure

    use cice_dynamics, only: run_dynamics
    !use cice_advection, only: run_advection
    use cice_forcing, only: get_forcing

    use cice_diagnostics, only: writeout_state

    use cice_therm_zerolayer, only: therm_zerolayer

    implicit none

    type(block_type), intent(inout) :: block
    type (MPAS_Clock_type), intent(in) :: clock
    real(kind=RKIND), intent(in) :: dt

    real(kind=RKIND) :: &
         time

    nstep = nstep + 1
    time = nstep * dt

    ! get forcing
    if (config_use_forcing) &
         call get_forcing( &
            block % mesh, &
            clock, &
            block % atmos_forcing)

    ! velocity solve
    if (config_use_velocity_solver) &
         call run_dynamics(block, dt, nstep)

    ! advection
    !if (config_use_advection) &    
    !     call run_advection(block, dt, nstep)

    ! output
    !call writeout_state(block, nstep)

  end subroutine cice_timestep

  !--------------------------------------------------------------------------

end module cice_time_integration
