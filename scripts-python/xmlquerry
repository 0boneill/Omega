#!/usr/bin/env python


from standard_script_setup import *

from CIME.utils import expect, run_cmd
from CIME.case import Case

import argparse, doctest, shutil, glob
import xml.etree.ElementTree as ET


###############################################################################
def parse_command_line(args, description):
###############################################################################

    # my %opts = (
    #     fileonly        =>0,
    #     valonly        =>0,
    #     value            =>0,
    #     file =>0,
    #     noexpandxml            =>0,
    #     help        =>0,
    #     listall        =>0,
    #     loglevel        =>"INFO",
    #     );


    parser = argparse.ArgumentParser()
    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("key",  
                        help="attribute value in env_*.xml file ( <element_name attribute='attribute_value'>value</element_name> )")
    parser.add_argument("-file", 
                        help="env*.xml file")
    parser.add_argument("--item" , help="attribute name in item")
    parser.add_argument("--attribute", nargs="*" , help="attribute name in item")
    
    parser.add_argument("--caseroot", default=os.getcwd(),
                        help="Case directory to build")
                        
  

    args = parser.parse_args(args[1:])

    CIME.utils.handle_standard_logging_options(args)

    return args


# Same reads from same file as xmlchange
# Use same methods


def _main_func(description):
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    args = parse_command_line(sys.argv, description)
    
    logging.debug("CLI arguments:" , args)
    
    case = Case(args.caseroot)
    item = "*"
    
    if args.key :
        item = args.key
    elif args.item :
        item = args.item
        
    
    logging.info("Searching for item '%s'" % item)
        
    value = case.get_value( item )
  
    if str(value):
        print item , value
    else:
        for k,v in value.iteritems():
            print k , v
    
   


if (__name__ == "__main__"):
    _main_func(__doc__)
