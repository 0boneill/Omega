module output_vertical_gradient_calculator_continuous

  ! This module runs vertical_gradient_calculator_continuous in some integration-style
  ! tests, printing out the results for each test case for later plotting.
  !
  ! We don't actually do assertions on the results - they are just made available for
  ! manual inspection later. However, we (ab)use pfunit to do this anyway.

  use pfunit_mod
  use vertical_gradient_calculator_continuous
  use vertical_gradient_calculator_2nd_order
  use vertical_gradient_calculator_continuousNoLimit
  use shr_kind_mod , only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: OutputVGCCont
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: run_test
     procedure :: write_output
  end type OutputVGCCont

  real(r8), parameter :: tol = 1.e-13_r8

  ! Standard elevation class bounds when running with 10 elevation classes
  real(r8), parameter :: bounds_10ec(11) = &
       [0._r8,   200._r8,   400._r8,   700._r8,  1000._r8,  1300._r8,  &
       1600._r8,  2000._r8,  2500._r8,  3000._r8, 10000._r8]

contains

  ! ========================================================================
  ! Test helpers
  ! ========================================================================

  subroutine setUp(this)
    class(OutputVGCCont), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(OutputVGCCont), intent(inout) :: this
  end subroutine tearDown

  subroutine run_test(this, name, elevclass_bounds, topo, data)
    ! Set up and run a test with the given inputs, for a single point
    !
    ! Also outputs results to files
    !
    ! Does separate outputs for:
    ! - initialguess
    ! - unlimited
    ! - limited
    class(OutputVGCCont), intent(inout) :: this
    character(len=*), intent(in) :: name
    real(r8), intent(in) :: elevclass_bounds(:)
    real(r8), intent(in) :: topo(:)
    real(r8), intent(in) :: data(:)

    type(vertical_gradient_calculator_2nd_order_type) :: calculator_initial_guess
    type(vgc_continuousNoLimit_type) :: calculator_unlimited
    type(vertical_gradient_calculator_continuous_type) :: calculator_limited
    integer :: nelev
    real(r8) :: gradients(size(topo))
    ! ------------------------------------------------------------------------

    nelev = size(topo)
    @assertEqual(nelev, size(data))
    @assertEqual(nelev+1, size(elevclass_bounds))

    calculator_initial_guess = vertical_gradient_calculator_2nd_order_type( &
         field = reshape(data, [1, nelev]), &
         topo = reshape(topo, [1, nelev]), &
         elevclass_bounds = elevclass_bounds)
    call calculator_initial_guess%calc_gradients()
    call calculator_initial_guess%get_gradients_one_point(point = 1, gradients = gradients)
    call this%write_output( &
         name = trim(name) // '_1initialguess', &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)

    calculator_unlimited = vgc_continuousNoLimit_type( &
         field = reshape(data, [1, nelev]), &
         topo = reshape(topo, [1, nelev]), &
         elevclass_bounds = elevclass_bounds, &
         calculator_initial_guess = calculator_initial_guess)
    call calculator_unlimited%calc_gradients()
    call calculator_unlimited%get_gradients_one_point(point = 1, gradients = gradients)
    call this%write_output( &
         name = trim(name) // '_2unlimited', &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)

    calculator_limited = vertical_gradient_calculator_continuous_type( &
         field = reshape(data, [1, nelev]), &
         topo = reshape(topo, [1, nelev]), &
         elevclass_bounds = elevclass_bounds, &
         calculator_initial_guess = calculator_initial_guess)
    call calculator_limited%calc_gradients()
    call calculator_limited%get_gradients_one_point(point = 1, gradients = gradients)
    call this%write_output( &
         name = trim(name) // '_3limited', &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         gradients = gradients)

  end subroutine run_test

  subroutine write_output(this, name, elevclass_bounds, topo, data, gradients)
    class(OutputVGCCont), intent(inout) :: this
    character(len=*), intent(in) :: name
    real(r8), intent(in) :: elevclass_bounds(:)
    real(r8), intent(in) :: topo(:)
    real(r8), intent(in) :: data(:)
    real(r8), intent(in) :: gradients(:)

    integer :: n_elev_classes
    character(len=:), allocatable :: filename
    character(len=32) :: bounds_format
    character(len=32) :: data_format

    character(len=*), parameter :: filename_prefix = 'gradients_continuous_'
    character(len=*), parameter :: filename_suffix = '.txt'
    integer, parameter :: out_unit = 11

    ! ------------------------------------------------------------------------

    n_elev_classes = size(gradients)
    @assertEqual(n_elev_classes + 1, size(elevclass_bounds))
    @assertEqual(n_elev_classes, size(topo))
    @assertEqual(n_elev_classes, size(data))

    filename = filename_prefix // trim(name) // filename_suffix
    open(out_unit, file=filename, action='write')

    write(bounds_format, '(a, i0, a, a)') '(', n_elev_classes + 1, 'f20.10', ')'
    write(data_format, '(a, i0, a, a)') '(', n_elev_classes, 'f20.10', ')'

    write(out_unit, '(i0)') n_elev_classes
    write(out_unit, bounds_format) elevclass_bounds
    write(out_unit, data_format) topo
    write(out_unit, data_format) data
    write(out_unit, data_format) gradients

    close(out_unit)
  end subroutine write_output

  ! ========================================================================
  ! Actual tests
  ! ========================================================================

  @Test
  subroutine basic(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'basic', &
         elevclass_bounds = [0._r8, 20._r8, 40._r8, 60._r8, 80._r8, 100._r8], &
         topo = [10._r8, 30._r8, 50._r8, 70._r8, 90._r8], &
         data = [2._r8, 5.5_r8, 8._r8, 9.5_r8, 10._r8])
  end subroutine basic

  ! ------------------------------------------------------------------------
  ! The following are taken from a cpl hist file with date stamp 0002-01-01 from test
  ! SMS_D_Ly1.f09_g16.TG.yellowstone_intel
  !
  ! The name of the test gives the x_y coordinate
  ! ------------------------------------------------------------------------

  @Test
  subroutine tg_year2_x237_y177(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x237_y177', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         300.00000000000000000_r8, &
         525.87927246093750000_r8, &
         850.00000000000000000_r8, &
         1174.07202148437500000_r8, &
         1491.06066894531250000_r8, &
         1634.75134277343750000_r8, &
         2250.00000000000000000_r8, &
         2750.00000000000000000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00003017942981387_r8, &
         0.00000000000000000_r8, &
         0.00000517720582138_r8, &
         0.00001201005943585_r8, &
         0.00001159968905995_r8, &
         0.00001089518445951_r8, &
         0.00000945808187680_r8, &
         0.00000954108236328_r8, &
         0.00000874735724210_r8, &
         0.00000951678703132_r8] &
         )
  end subroutine tg_year2_x237_y177

  @Test
  subroutine tg_year2_x254_y179(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x254_y179', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         300.00000000000000000_r8, &
         550.00000000000000000_r8, &
         850.00000000000000000_r8, &
         1150.00000000000000000_r8, &
         1450.00000000000000000_r8, &
         1800.00000000000000000_r8, &
         2432.00463867187500000_r8, &
         2512.73315429687500000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00004915712270304_r8, &
         -0.00003682274473249_r8, &
         -0.00002054757533188_r8, &
         0.00000890800856723_r8, &
         0.00000912497216632_r8, &
         0.00000876096328284_r8, &
         0.00000813312544778_r8, &
         0.00000723849916540_r8, &
         0.00000716611339158_r8, &
         0.00000634025218460_r8] &
         )
  end subroutine tg_year2_x254_y179

  @Test
  subroutine tg_year2_x269_y179(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x269_y179', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         300.00000000000000000_r8, &
         673.48120117187500000_r8, &
         891.23760986328125000_r8, &
         1033.81237792968750000_r8, &
         1450.00000000000000000_r8, &
         1800.00000000000000000_r8, &
         2250.00000000000000000_r8, &
         2750.00000000000000000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00004158946831012_r8, &
         -0.00002728389881668_r8, &
         -0.00000371834676116_r8, &
         -0.00000029612721164_r8, &
         -0.00000001078467626_r8, &
         -0.00000063053033728_r8, &
         -0.00000042971075231_r8, &
         -0.00000006648337347_r8, &
         0.00000000000000000_r8, &
         0.00001133324531111_r8] &
         )
  end subroutine tg_year2_x269_y179

  @Test
  subroutine tg_year2_x245_y171(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x245_y171', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         300.00000000000000000_r8, &
         550.00000000000000000_r8, &
         850.00000000000000000_r8, &
         1150.00000000000000000_r8, &
         1450.00000000000000000_r8, &
         1800.00000000000000000_r8, &
         2250.00000000000000000_r8, &
         2750.00000000000000000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00006216453766683_r8, &
         -0.00005053480708739_r8, &
         -0.00003879935684381_r8, &
         -0.00002813775790855_r8, &
         -0.00000682415202391_r8, &
         0.00000000000000000_r8, &
         0.00000000000000000_r8, &
         0.00000581615859119_r8, &
         0.00000578505614612_r8, &
         0.00000704487820258_r8] &
         )
  end subroutine tg_year2_x245_y171

  @Test
  subroutine tg_year2_x253_y171(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x253_y171', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         300.00000000000000000_r8, &
         550.00000000000000000_r8, &
         850.00000000000000000_r8, &
         1150.00000000000000000_r8, &
         1450.00000000000000000_r8, &
         1800.00000000000000000_r8, &
         2250.00000000000000000_r8, &
         2741.18652343750000000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00005745654925704_r8, &
         -0.00004694490053225_r8, &
         -0.00003445266702329_r8, &
         0.00000570591555515_r8, &
         0.00001267663446924_r8, &
         0.00001288491057494_r8, &
         0.00001228994733538_r8, &
         0.00001145447004092_r8, &
         0.00001063432864612_r8, &
         0.00000983382778941_r8] &
         )
  end subroutine tg_year2_x253_y171

  @Test
  subroutine tg_year2_x266_y173(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x266_y173', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         300.00000000000000000_r8, &
         550.00000000000000000_r8, &
         871.65301513671875000_r8, &
         1211.49768066406250000_r8, &
         1432.28137207031250000_r8, &
         1665.71423339843750000_r8, &
         2250.00000000000000000_r8, &
         2750.00000000000000000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00006089130329201_r8, &
         -0.00005163572859601_r8, &
         -0.00004160191747360_r8, &
         -0.00002927129935415_r8, &
         -0.00001998909647227_r8, &
         -0.00001512261678727_r8, &
         -0.00001263937429030_r8, &
         -0.00000406959406973_r8, &
         0.00000000000000000_r8, &
         0.00001004394562187_r8] &
         )
  end subroutine tg_year2_x266_y173

  @Test
  subroutine tg_year2_x247_y164(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x247_y164', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         300.00000000000000000_r8, &
         550.00000000000000000_r8, &
         850.00000000000000000_r8, &
         1150.00000000000000000_r8, &
         1450.00000000000000000_r8, &
         1800.00000000000000000_r8, &
         2250.00000000000000000_r8, &
         2750.00000000000000000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00008932914352044_r8, &
         -0.00007648371683899_r8, &
         -0.00006422778824344_r8, &
         -0.00004912317308481_r8, &
         -0.00003472463868093_r8, &
         -0.00000160152967510_r8, &
         0.00000921983701119_r8, &
         0.00000909015761863_r8, &
         0.00001246667034138_r8, &
         0.00001318262184213_r8] &
         )
  end subroutine tg_year2_x247_y164

  @Test
  subroutine tg_year2_x251_y164(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x251_y164', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         300.00000000000000000_r8, &
         550.00000000000000000_r8, &
         850.00000000000000000_r8, &
         1150.00000000000000000_r8, &
         1450.00000000000000000_r8, &
         1800.00000000000000000_r8, &
         2441.64257812500000000_r8, &
         2564.37524414062500000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00010203790589003_r8, &
         -0.00008802362572169_r8, &
         -0.00006545173528139_r8, &
         -0.00003821765130851_r8, &
         -0.00001615641485841_r8, &
         0.00000000000000000_r8, &
         0.00001520295427326_r8, &
         0.00001540742596262_r8, &
         0.00001525775314803_r8, &
         0.00001418547435605_r8] &
         )
  end subroutine tg_year2_x251_y164

  @Test
  subroutine tg_year2_x255_y163(this)
    class(OutputVGCCont), intent(inout) :: this

    call this%run_test( &
         name = 'tg_year2_x255_y163', &
         elevclass_bounds = bounds_10ec, &
         topo = [ &
         100.00000000000000000_r8, &
         277.44519042968750000_r8, &
         561.45306396484375000_r8, &
         830.48663330078125000_r8, &
         1167.21862792968750000_r8, &
         1373.33569335937500000_r8, &
         1800.00000000000000000_r8, &
         2250.00000000000000000_r8, &
         2750.00000000000000000_r8, &
         3500.00000000000000000_r8], &
         data = [ &
         -0.00002278820284118_r8, &
         -0.00000824440030556_r8, &
         0.00000927457949729_r8, &
         0.00002404907900200_r8, &
         0.00003126181036350_r8, &
         0.00003124762952211_r8, &
         0.00003117840242339_r8, &
         0.00003535178620950_r8, &
         0.00003866513725370_r8, &
         0.00004323109533289_r8] &
         )
  end subroutine tg_year2_x255_y163

end module output_vertical_gradient_calculator_continuous
