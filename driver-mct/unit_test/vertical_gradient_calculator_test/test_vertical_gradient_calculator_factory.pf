module test_vertical_gradient_calculator_factory

  ! Tests of vertical_gradient_calculator_factory

  use pfunit_mod
  use vertical_gradient_calculator_factory
  use shr_kind_mod , only : r8 => shr_kind_r8
  use vertical_gradient_test_utils
  use mct_mod, only : mct_aVect, mct_aVect_clean
  use mct_wrapper_mod, only : mct_init, mct_clean

  implicit none

  @TestCase
  type, extends(TestCase) :: TestVertGradCalcFactory
     type(mct_aVect) :: av
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestVertGradCalcFactory

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestVertGradCalcFactory), intent(inout) :: this

    call mct_init()
  end subroutine setUp

  subroutine tearDown(this)
    class(TestVertGradCalcFactory), intent(inout) :: this

    call mct_aVect_clean(this%av)
    call mct_clean()
  end subroutine tearDown

  @Test
  subroutine test_extract_data(this)
    class(TestVertGradCalcFactory), intent(inout) :: this
    integer, parameter :: npts = 2
    integer, parameter :: nelev = 3
    real(r8), parameter :: topo(npts,nelev) = &
         reshape([1._r8, 2._r8, 3._r8, 4._r8, 5._r8, 6._r8], [npts, nelev])
    real(r8), parameter :: data(npts,nelev) = &
         reshape([11._r8, 12._r8, 13._r8, 14._r8, 15._r8, 16._r8], [npts, nelev])
    real(r8), allocatable :: topo_extracted(:,:)
    real(r8), allocatable :: data_extracted(:,:)

    call create_av(topo, data, 'topo', 'data', this%av)

    call extract_data_from_attr_vect(this%av, 'data', 'topo', elevclass_names(nelev), &
         data_extracted, topo_extracted)

    @assertEqual(data, data_extracted)
    @assertEqual(topo, topo_extracted)
  end subroutine test_extract_data

end module test_vertical_gradient_calculator_factory

