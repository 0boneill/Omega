#!/usr/bin/env python2

"""
template to create a case short term archiving script
"""

import sys, os, time

workdir = os.environ.get("PBS_O_WORKDIR")
if workdir is not None:
    os.chdir(workdir)

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise exc_type("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup          import *
from CIME.XML.standard_module_setup import *
from CIME.XML.files                 import Files
from CIME.XML.component             import Component
from CIME.case                      import Case
from CIME.utils                     import expect, get_model, run_cmd
from CIME.env_module                import EnvModule
from CIME.utils                     import expect, get_utc_timestamp
from CIME.check_lockedfiles         import check_lockedfiles
from CIME.preview_namelists         import preview_namelists

logger = logging.getLogger(__name__)

# Batch system directives
{{ batchdirectives }}

###############################################################################
def parse_command_line(args):
###############################################################################

    CIME.utils.get_model()

    parser = argparse.ArgumentParser()

    CIME.utils.setup_standard_logging_options(parser)

    args = parser.parse_args()

    CIME.utils.handle_standard_logging_options(args)

###############################################################################
def _main_func():
###############################################################################

    parse_command_line(sys.argv)

    case = Case()

    caseroot = case.get_value("CASEROOT")
    testlog  = os.path.join(caseroot,"TestStatus.log")

    # do short-term archiving
    if os.path.isfile(testlog):
        with open(testlog, "a") as fd:
            fd.write("st_archiving starting %s" %(time.strftime("%Y-%m-%d %H:%M:%S")))

    cmd = os.path.join(caseroot,"Tools/st_archive") + " >> stArchiveStatus 2>&1"  
    run_cmd(cmd)

    if os.path.isfile(testlog):
        with open(testlog, "a") as fd:
            fd.write("st_archiving completed %s" %(time.strftime("%Y-%m-%d %H:%M:%S")))

    # resubmit case if appropriate
    resubmit = int(case.get_value("RESUBMIT"))
    if resubmit > 0:                   
	cmd = os.path.join(caseroot, "case.submit") + " -resubmit -scriptname case.st_archive"
        run_cmd(cmd, from_dir=caseroot)

        if os.path.isfile(testlog):
            with open(testlog, "a") as fd:
                fd.write("resubmitting %s" %(time.strftime("%Y-%m-%d %H:%M:%S")))


###############################################################################

if __name__ == "__main__":
    _main_func()
