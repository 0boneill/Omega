#!/usr/bin/env python2

"""
template to create a case short term archiving script
"""

import sys, os, time

workdir = os.environ.get("PBS_O_WORKDIR")
if workdir is not None:
    os.chdir(workdir)

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise exc_type("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup          import *
from CIME.XML.standard_module_setup import *
from CIME.XML.files                 import Files
from CIME.XML.component             import Component
from CIME.case                      import Case
from CIME.utils                     import expect, get_model, run_cmd
from CIME.env_module                import EnvModule
from CIME.utils                     import expect, get_utc_timestamp
from CIME.check_lockedfiles         import check_lockedfiles
from CIME.preview_namelists         import preview_namelists

logger = logging.getLogger(__name__)

# Batch system directives
{{ batchdirectives }}

###############################################################################
def parse_command_line(args):
###############################################################################

    CIME.utils.get_model()

    parser = argparse.ArgumentParser()

    CIME.utils.setup_standard_logging_options(parser)

    args = parser.parse_args()

    CIME.utils.handle_standard_logging_options(args)


###############################################################################
def _main_func():
###############################################################################

    parse_command_line(sys.argv)
    
    case = Case()

    caseroot = case.get_value("CASEROOT")
    testlog  = os.path.join(caseroot,"TestStatus.log")

    # max number of threads needed by scripts
    os.environ["maxthrds"] = 1

    # document start
    if os.path.isfile(testlog):
        with open(testlog, "a") as fd:
            fd.write("lt_archive starting %s" %(time.strftime("%Y-%m-%d %H:%M:%S")))
    logger.info("lt_archive starting %s" %(time.strftime("%Y-%m-%d %H:%M:%S")))

    # determine status of run and short term archiving
    runComplete = False
    statusfile = os.path.join(caseroot,"CaseStatus") 
    if os.path.isfile(statusFile):
        if 'run SUCCESSFUL' in open(statusFile).read():
            runComplete = True

    statusComplete = False
    statusfile = os.path.join(caseroot,"stArchiveStatus")
    if os.path.isfile(statusFile):
        if 'st_archive process complete' in open(statusFile).read():
            runComplete = True

    # set up envrionment vars and call the lt_archive.sh script
    if runComplete and staComplete:
        os.environ["DOUT_S_ROOT"]       = case.get_value("DOUT_S_ROOT")
        os.environ["DOUT_L_MSROOT"]     = case.get_value("DOUT_L_MSROOT")
	os.environ["DOUT_L_HPSS_ACCNT"] = case.get_value("DOUT_L_HPSS_ACCNT")

	lid = time.strftime("%y%m%d-%H%M%S")
        lt_archive_args = {{ lt_archive_args }}
        cmd = os.path.join(caseroot, "Tools/lt_archive.sh") + lt_archive_args + "ltArchiveStatus." + lid + " 2>&1"
        run_cmd(cmd, from_dir=caseroot)
    else:
        expect(False, 
               "lt_archive: run or st_archive is not yet complete or was not successful."
               "Unable to perform long term archive...")

    # document completion
    if os.path.isfile(testlog):
        with open(testlog, "a") as fd:
            fd.write("lg_archive completed %s" %(time.strftime("%Y-%m-%d %H:%M:%S")))

    # resubmit case if appropriate
    resubmit = int(case.get_value("RESUBMIT"))
    if resubmit > 0:                   
	cmd = os.path.join(caseroot, "case.submit") + " -resubmit -scriptname case.st_archive"
        run_cmd(cmd, from_dir=caseroot)

        if os.path.isfile(testlog):
            with open(testlog, "a") as fd:
                fd.write("resubmitting %s" %(time.strftime("%Y-%m-%d %H:%M:%S")))

###############################################################################

if __name__ == "__main__":
    _main_func()
